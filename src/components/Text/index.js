import PropTypes from 'prop-types'
import React, { Component } from 'react'
import classNames from 'classnames'
import Button from '../Button'
import ButtonGroup from '../ButtonGroup'
import Textarea from '../Form/Textarea'
import { getWindowSize, getAttributeForCurrentSize } from '../../utils/size'
import style from './style.less'
import colors from '../../foundation/colors.less'

export default class Text extends Component {
   static propTypes = {
      children: PropTypes.node,
      className: PropTypes.string,
      color: PropTypes.string,
      editable: PropTypes.bool,
      editorCancelButtonText: PropTypes.string,
      editorDoneButtonText: PropTypes.string,
      editorState: PropTypes.oneOf(['ready', 'pending']),
      editorOnCancel: PropTypes.func,
      editorOnDone: PropTypes.func,
      editorShowEditButton: PropTypes.bool,
      editorValue: PropTypes.string,
      editing: PropTypes.bool,
      fontFamily: PropTypes.string,
      letterSpacing: PropTypes.string,
      relativeSize: PropTypes.bool,
      size: PropTypes.string.isRequired,
      style: PropTypes.object,
      uppercase: PropTypes.bool,
      weight: PropTypes.string.isRequired
   }

   static defaultProps = {
      editable: false,
      editorCancelButtonText: 'Cancel',
      editorDoneButtonText: 'Done',
      editorState: 'ready',
      editorShowEditButton: false,
      editing: false,
      relativeSize: false,
      size: '3',
      weight: 'normal'
   }

   static contextTypes = {
      OIOStyles: PropTypes.object
   }

   constructor(props) {
      super(props)

      this.state = {
         editing: props.editing,
         editorValue: props.editorValue,
         size: getWindowSize()
      }
   }

   // =====================================================
   // Lifecycle
   // =====================================================

   componentDidMount() {
      window.addEventListener('resize', this.windowSizeUpdated, false)
   }

   componentWillReceiveProps(nextProps) {
      const stateChangeRequired = ['editable', 'editing', 'editorState', 'editorValue'].some(prop => (
         typeof nextProps[prop] !== 'undefined' && this.state[prop] !== nextProps[prop]
      ))

      if (stateChangeRequired) {
         this.setState({
            editable: nextProps.editable,
            editing: nextProps.editing,
            editorState: nextProps.editorState,
            editorValue: nextProps.editorValue
         })
      }
   }

   componentDidUpdate() {
      // this.editor is a ref generated by the editable portion,
      // when the componentDidUpdate, auto-size the textarea
      if (this.editor) {
         const textarea = this.editor.parentNode.getElementsByTagName('textarea')[0]
         this.adjustTextareaHeight(textarea)
      }
   }

   componentWillUnmount() {
      window.removeEventListener('resize', this.windowSizeUpdated)
   }

   // =====================================================
   // Utils
   // =====================================================

   adjustTextareaHeight(textarea) {
      if (textarea) {
         // Set to auto first to "reset" to avoid browser jank
         textarea.style.height = 'auto'
         textarea.style.height = `${textarea.scrollHeight + 5}px`
      }
   }

   // =====================================================
   // Event Handlers
   // =====================================================

   handleChange = (event) => {
      this.adjustTextareaHeight(event.target)

      let value = event.target.value

      // Remove line-breaks from textarea value
      value = value.replace(/\n/g, '')

      this.setState({ editorValue: value })
   }

   handleEditCancel = () => {
      if (this.props.editorOnCancel) this.props.editorOnCancel(this.state.editorValue)

      this.setState({ editorValue: this.props.editorValue })
   }

   handleEditClick = (event) => {
      this.setState({
         editorValue: this.props.editorValue,
         editing: true
      })
   }

   handleEditDone = () => {
      if (this.props.editorOnDone) this.props.editorOnDone(this.state.editorValue)
   }

   windowSizeUpdated = () => {
      const windowSize = getWindowSize()
      this.setState({ size: windowSize })
   }

   // =====================================================
   // Edit Action Buttons JSX (Editable Text Only)
   // =====================================================

   editButtonsReady() {
      return (
         <ButtonGroup align="right">
            <Button
               onClick={this.handleEditCancel}
               name={this.props.editorCancelButtonText}
               size="tiny"
               color="#CCC"
            />
            <Button
               onClick={this.handleEditDone}
               name={this.props.editorDoneButtonText}
               size="tiny"
            />
         </ButtonGroup>
      )
   }

   editButtonsPending() {
      return (
         <ButtonGroup align="right">
            <Button
               onClick={this.handleEditDone}
               name="Done"
               size="tiny"
               mode="loading"
            />
         </ButtonGroup>
      )
   }

   // =====================================================
   // Render
   // =====================================================

   render() {
      const { relativeSize, size, weight } = this.props
      const fontSize = getAttributeForCurrentSize(this.state.size, size)
      const textStyle = {
         ...this.props.style,
         ...this.context.OIOStyles.fontSizes[fontSize],
         ...this.context.OIOStyles.fontWeights[weight]
      }

      if (relativeSize) {
         textStyle.fontSize = `${parseFloat(textStyle.fontSize)}em`
      }

      if (this.props.fontFamily) {
         textStyle.fontFamily = this.props.fontFamily
      }

      if (this.props.letterSpacing) {
         textStyle.letterSpacing = this.props.letterSpacing
      }

      const textClasses = [
         colors[this.props.color],
         this.props.className
      ]

      if (this.props.uppercase) {
         textClasses.push(style.uppercase)
      }

      const editing = this.props.editable && this.state.editing
      const editorValue = this.props.editable && this.props.editorValue

      const showEditButton = (
         !this.state.editing &&
         this.props.editable &&
         this.props.editorShowEditButton
      )

      const editActionButtons = this.props.editorState === 'ready'
         ? this.editButtonsReady()
         : this.editButtonsPending()

      let content = <span>{this.props.children || editorValue}</span>
      if (editing) {
         content = (
            <div ref={(editor) => { this.editor = editor }}>
               <Textarea
                  className={style.editTextarea}
                  onChange={this.handleChange}
                  value={this.state.editorValue}
                  placeholder="Add text..."
                  disabled={this.state.editorState === 'pending'}
               />
               {editActionButtons}
            </div>
         )
      }

      return (
         <div className={classNames(textClasses)} style={textStyle}>
            {showEditButton && (
               <Button
                  onClick={this.handleEditClick}
                  className={style.editButton}
                  icon="ion-edit"
                  size="tiny"
               />
            )}
            {content}
         </div>
      )
   }
}
