import React, { Component } from 'react'
import classNames from 'classnames'
import Button from '../Button'
import ButtonGroup from '../ButtonGroup'
import Textarea from '../Form/Textarea'
import style from './style.less'
import colors from '../../foundation/colors.less'

export default class Text extends Component {
   static propTypes = {
      cancelButtonText: React.PropTypes.string,
      children: React.PropTypes.node,
      className: React.PropTypes.string,
      color: React.PropTypes.string,
      doneButtonText: React.PropTypes.string,
      editable: React.PropTypes.bool,
      editing: React.PropTypes.bool,
      editLoading: React.PropTypes.bool,
      onCancel: React.PropTypes.func,
      onDone: React.PropTypes.func,
      showEditButton: React.PropTypes.bool,
      size: React.PropTypes.string,
      uppercase: React.PropTypes.bool,
      value: React.PropTypes.string,
      weight: React.PropTypes.string
   }

   static defaultProps = {
      cancelButtonText: 'Cancel',
      doneButtonText: 'Done',
      editable: false,
      editing: false,
      editLoading: false,
      showEditButton: false,
      weight: 'normal'
   }

   static contextTypes = {
      OIOStyles: React.PropTypes.object
   }

   constructor(props) {
      super(props)

      this.handleChange = this.handleChange.bind(this)
      this.handleEditCancel = this.handleEditCancel.bind(this)
      this.handleEditClick = this.handleEditClick.bind(this)
      this.handleEditDone = this.handleEditDone.bind(this)

      this.state = {
         editing: props.editing,
         inputValue: props.value
      }
   }

   componentWillReceiveProps(nextProps) {
      const newState = { editing: nextProps.editing }

      // Update inputValue if different from value and not loading
      if (nextProps.value !== this.state.inputValue && !nextProps.editLoading) {
         newState.inputValue = nextProps.value
      }

      this.setState(newState)
   }

   componentDidUpdate() {
      // this.editor is a ref generated by the editable portion,
      // when the componentDidUpdate, auto-size the textarea
      if (this.editor) {
         const textarea = this.editor.parentNode.getElementsByTagName('textarea')[0]
         this.adjustTextareaHeight(textarea)
      }
   }

   adjustTextareaHeight(textarea) {
      if (textarea) {
         // Set to auto first to "reset" to avoid browser jank
         textarea.style.height = 'auto'
         textarea.style.height = `${textarea.scrollHeight + 5}px`
      }
   }

   handleChange(event) {
      this.adjustTextareaHeight(event.target)

      let value = event.target.value

      // Remove line-breaks from textarea value
      value = value.replace(/\n/g, '')

      this.setState({ inputValue: value })
   }

   handleEditCancel() {
      if (this.props.onCancel) this.props.onCancel(this.state.inputValue)

      this.setState({ inputValue: this.props.value })
   }

   handleEditClick(event) {
      this.setState({
         inputValue: this.props.value,
         editing: true
      })
   }

   handleEditDone() {
      if (this.props.onDone) this.props.onDone(this.state.inputValue)
   }

   render() {
      const fontSize = this.props.size ? `textSize${this.props.size}` : 'textSize3'
      const textStyle = {}

      const classes = [
         style.editContainer,
         style[fontSize],
         style[this.props.weight],
         colors[this.props.color],
         this.props.className
      ]

      if (this.props.uppercase) {
         classes.push(style.uppercase)
      }

      const showEditButton = (
         !this.props.children &&
         !this.state.editing &&
         this.props.editable &&
         this.props.showEditButton
      )

      let editActionButtons = (
         <ButtonGroup align="right">
            <Button
               onClick={this.handleEditCancel}
               name={this.props.cancelButtonText}
               size="tiny"
               color="#CCC"
            />
            <Button
               onClick={this.handleEditDone}
               name={this.props.doneButtonText}
               size="tiny"
            />
         </ButtonGroup>
      )

      if (this.props.editLoading) {
         editActionButtons = (
            <ButtonGroup align="right">
               <Button
                  onClick={this.handleEditDone}
                  name="Done"
                  size="tiny"
                  mode="loading"
               />
            </ButtonGroup>
         )
      }

      return (
         <div className={classNames(classes)} style={textStyle}>
            {showEditButton && (
               <Button
                  onClick={this.handleEditClick}
                  className={style.editButton}
                  icon="ion-edit"
                  size="tiny"
               />
            )}
            {!this.props.children && !this.state.editing && (
               <span>{this.props.value}</span>
            )}
            {!this.props.editable && this.props.children}
            {this.state.editing && this.props.editable && (
               <div ref={(editor) => { this.editor = editor }}>
                  <Textarea
                     className={style.editTextarea}
                     onChange={this.handleChange}
                     value={this.state.inputValue}
                     placeholder="Add text..."
                  />
                  {editActionButtons}
               </div>
            )}
         </div>
      )
   }
}
